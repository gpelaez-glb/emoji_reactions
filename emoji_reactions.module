<?php

/**
 * @file
 * Contains emoji_reactions.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\emoji_reactions\Service\EmojiReactionsManager;
use Drupal\views\Plugin\views\PluginBase;
use Drupal\views\ViewExecutable;

define('EMOJI_REACTIONS_ANGRY', 'angry');
define('EMOJI_REACTIONS_HAHA', 'haha');
define('EMOJI_REACTIONS_LIKE', 'like');
define('EMOJI_REACTIONS_LOVE', 'love');
define('EMOJI_REACTIONS_SAD', 'sad');
define('EMOJI_REACTIONS_WOW', 'wow');
define('EMOJI_REACTIONS_YAY', 'yay');

define('EMOJI_REACTIONS_DEFAULTS', [
  EMOJI_REACTIONS_ANGRY,
  EMOJI_REACTIONS_HAHA,
  EMOJI_REACTIONS_LIKE,
  EMOJI_REACTIONS_LOVE,
  EMOJI_REACTIONS_SAD,
  EMOJI_REACTIONS_WOW,
  EMOJI_REACTIONS_YAY,
]);

/**
 * Implements hook_help().
 */
function emoji_reactions_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the emoji_reactions module.
    case 'help.page.emoji_reactions':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('React to any content') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function emoji_reactions_entity_extra_field_info() {
  $extra = [];

  $config = \Drupal::config('emoji_reactions.settings');
  $target_entities = $config->get('target_entities');

  if (!empty($target_entities)) {
    foreach ($target_entities as $key => $entity) {
      $target_arr = explode(':', $key);
      $entity_type = $target_arr[0];
      $entity_bundle = $target_arr[1];
      $extra[$entity_type][$entity_bundle]['display']['emoji_reactions'] = [
        'label' => t('Emoji Reactions!'),
        'description' => t('Custom reactions link.'),
        'weight' => 100,
        'visible' => TRUE,
        'render_class' => 'Drupal\emoji_reactions\EmojiReactionsExtrafieldRender',
      ];
    }
  }

  // var_dump($extra);
  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function emoji_reactions_entity_view(&$build, $entity, $display, $view_mode) {
  // Don't show on previews.
  if ($entity->isNew()) {
    return;
  }

  if ($display->getComponent('emoji_reactions')) {
    /** @var \Drupal\emoji_reactions\Service\EmojiReactionsManager $emoji_reactions_manager */
    $emoji_reactions_manager = \Drupal::service('emoji_reactions.manager');
    $build['emoji_reactions'] = $emoji_reactions_manager->getLinksByEntity($entity);
  }
}

/**
 * Implements hook_theme().
 */
function emoji_reactions_theme() {
  $theme = [];
  $theme['reaction_emoji'] = [
      'variables' => [
        'animate' => TRUE,
        'reaction' => '',
      ],
      'render element' => 'children',
      '#attached' => [
        'library' => [
          'emoji_reactions/emoji',
        ],
      ],
    ];
  $theme['reaction_link'] = [
      'variables' => [
        'content' => [
          'icon' => NULL,
          'link' => NULL,
          'view' => NULL,
          'message' => NULL,
        ],
        'reaction' => '',
        'action' => '',
        'count' => '',
      ],
      'attributes' => [
        'class' => ['emoji-reaction-wrapper'],
      ],
      'attached' => [
        'library' => [
          'emoji_reactions/emoji',
        ],
      ],
    ];
  $theme['reactions_button'] = [
    'variables' => [
      'reactions' => [],
    ],
    'attributes' => [],
  ];
  return $theme;
}

/**
 * Remove all emoji_reaction entities from user account.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   User account.
 */
function emoji_reactions_remove_from_user(AccountInterface $account) {
  /** @var EmojiReactionsManager $manager */
  $manager = \Drupal::service('emoji_reactions.manager');
  return $manager->removeAllFromUser($account);

}

/**
 * Implements hook_user_cancel().
 */
function emoji_reactions_user_cancel($edit, $account, $method) {
  emoji_reactions_remove_from_user($account);
}

/**
 * Implements hook_user_delete().
 */
function emoji_reactions_user_delete(AccountInterface $account) {
  emoji_reactions_remove_from_user($account);
}

/**
 * Implements hook_entity_delete().
 */
function emoji_reactions_entity_delete(EntityInterface $entity) {

  /** @var EmojiReactionsManager $manager */
  $manager = \Drupal::service('emoji_reactions.manager');
  return $manager->removeAllFromEntity($entity);

}

/**
 * Implements hook_views_query_substitutions().
 */
function emoji_reactions_query_substitutions(ViewExecutable $view) {
  $session_id = \Drupal::service('emoji_reactions.manager')->getCookie();
  $substitutions = [
    '***CURRENT_SESSION_ID***' => $session_id,
  ] + PluginBase::queryLanguageSubstitutions();

  return $substitutions;
}


/**
 * Implements hook_preprocess_HOOK().
 */
function emoji_reactions_preprocess_reaction_link(&$variables) {
  // dpm($variables);
}


/**
 * Implements hook_preprocess_HOOK().
 */
function emoji_reactions_preprocess_reaction_emoji(&$variables) {
  // dpm($variables);
  // die();
  $variables['#attached']['library'][] =  'emoji_reactions/emoji';
}